library(rhdf5)
created = h5createFile("example/h5")
created
created = h5createFile("example.h5")
created
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each=4), sd=0.2)
y <- rnrom(12, mean = rep(c(1,2,1), each = 4), sd=0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
test(x+0.05,y+0.05,labels=as.character(1:12))
text(x+0.05,y+0.05,labels=as.character(1:12))
dataFrame <- data.frame(x=x, y=y)
View(dataFrame)
dist(dataFrame)
distxy <- dis(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function(hClustering, lab = rep(1:3, each=4), lab.col=rep(1:3, each=4) )
)
myplclust(hClustering, lab = rep(1:3, each=4), lab.col=rep(1:3, each=4) )
?myplclust
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
rm(list=ls())
par(mar=rep(0.2,4))
dataMatrix <- matrix(rnorm(400), nrow=40)
image(1:10, 1:40, t(dataMatrix[,nrow(dataMatrix):1]))
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
library(blsAPI)
library(rjson)
query <- list('seriesid'=c('LAUCN040010000000005','LAUCN040010000000006'),
'startyear'=2014,
'endyear'=2014,
'registrationKey'='a8338f75033c4cf78613acb6ca3fc026')
response <- blsAPI(query,2)
json <- fromJSON(response)
json
serieslist = as.list(c('LAUCN040010000000005','LAUCN040010000000006'))
query <- list('seriesid'=serieslist,
'startyear'=2014,
'endyear'=2014,
'registrationKey'='a8338f75033c4cf78613acb6ca3fc026')
response <- blsAPI(query,2)
json <- fromJSON(response)
json
output <- data.frame("ID" = character(0),
"Year" = character(0),
"Period"= character(0),
"PeriodNAme" = character(0),
"Mean_Wage" = numeric(0))
for(j in 1:length(serieslist)){
#Parsing JSON String
temp <- json$Results[[1]][[j]]
tempoutput <- data.frame(seriesID=sapply(temp$seriesID,"["),
year=sapply(temp$data,"[[", "year"),
period=sapply(temp$data,"[[", "period"),
periodName=sapply(temp$data,"[[","periodName"),
value=as.numeric(sapply(temp$data,"[[","value")),
stringsAsFactors=FALSE,row.names=NULL)
output <- rbind(tempoutput,Output)
}
for(j in 1:length(serieslist)){
#Parsing JSON String
temp <- json$Results[[1]][[j]]
tempoutput <- data.frame(seriesID=sapply(temp$seriesID,"["),
year=sapply(temp$data,"[[", "year"),
period=sapply(temp$data,"[[", "period"),
periodName=sapply(temp$data,"[[","periodName"),
value=as.numeric(sapply(temp$data,"[[","value")),
stringsAsFactors=FALSE,row.names=NULL)
output <- rbind(tempoutput,output)
}
View(output)
serieslist
input <- as.list(read.csv(".\BLSData.csv"))
#Pull the data from the BLS
setwd("C:/Users/hom42612/Desktop/Coursera/Kennecter")
input <- as.list(read.csv(".\BLSData.csv"))
input <- as.list(read.csv("./BLSData.csv"))
input <- read.csv("./BLSData.csv")
View(input)
input <- read.csv("./BLSData.csv")
View(input)
input <- as.list(read.csv("./BLSData.csv"))
input <- read.csv("./BLSData.csv")
nrow(input)
input[1,]
serieslist
input <- read.csv("./BLSData.csv", StringsAsFactors=FALSE)
input <- data.frame(read.csv("./BLSData.csv"), StringsAsFactors=FALSE)
View(input)
input <- read.csv("./BLSData.csv")
class(input[1,])
serieslist[1]
serieslist[[1]]
class(serieslist[[1]])
?read.csv
input <- read.csv("./BLSData.csv", colClasses = "character")
View(input)
input <- as.list(read.csv("./BLSData.csv", colClasses = "character"))
input
serieslist
class(serieslist)
class(input)
input <- read.csv("./BLSData.csv", colClasses = "character")
as.list(input[1:2,])
serieslist
inputlist <- as.list(input[1:nrow(input),])
query <- list('seriesid'=inputlist,
'startyear'=2014,
'endyear'=2014,
'registrationKey'='a8338f75033c4cf78613acb6ca3fc026')
response <- blsAPI(query,2)
json <- fromJSON(response)
json
for(j in 1:length(inputlist)){
#Parsing JSON String
temp <- json$Results[[1]][[j]]
tempoutput <- data.frame(seriesID=sapply(temp$seriesID,"["),
year=sapply(temp$data,"[[", "year"),
period=sapply(temp$data,"[[", "period"),
periodName=sapply(temp$data,"[[","periodName"),
value=as.numeric(sapply(temp$data,"[[","value")),
stringsAsFactors=FALSE,row.names=NULL)
output <- rbind(tempoutput,output)
}
rm(list=ls())
#Pull the data from the BLS
setwd("C:/Users/hom42612/Desktop/Coursera/Kennecter")
library(blsAPI)
library(rjson)
input <- read.csv("./BLSData.csv", colClasses = "character")
inputlist <- as.list(input[1:nrow(input),])
#Create blank data frame that will have your final results. Change table names or column names as needed.
output <- data.frame("ID" = character(0),
"Year" = character(0),
"Period"= character(0),
"PeriodNAme" = character(0),
"Mean_Wage" = numeric(0))
#serieslist = as.list(c('LAUCN040010000000005','LAUCN040010000000006'))
query <- list('seriesid'=inputlist,
'startyear'=2014,
'endyear'=2014,
'registrationKey'='a8338f75033c4cf78613acb6ca3fc026')
response <- blsAPI(query,2)
json <- fromJSON(response)
for(j in 1:length(inputlist)){
#Parsing JSON String
temp <- json$Results[[1]][[j]]
tempoutput <- data.frame(seriesID=sapply(temp$seriesID,"["),
year=sapply(temp$data,"[[", "year"),
period=sapply(temp$data,"[[", "period"),
periodName=sapply(temp$data,"[[","periodName"),
value=as.numeric(sapply(temp$data,"[[","value")),
stringsAsFactors=FALSE,row.names=NULL)
output <- rbind(tempoutput,output)
}
View(output)
rm(list=ls())
#Pull the data from the BLS
setwd("C:/Users/hom42612/Desktop/Coursera/Kennecter")
library(blsAPI)
library(rjson)
input <- read.csv("./BLSData.csv", colClasses = "character")
inputlist <- as.list(input[1:nrow(input),])
#Create blank data frame that will have your final results. Change table names or column names as needed.
output <- data.frame("ID" = character(0),
"Year" = character(0),
"Period"= character(0),
"PeriodNAme" = character(0),
"Mean_Wage" = numeric(0))
#serieslist = as.list(c('LAUCN040010000000005','LAUCN040010000000006'))
query <- list('seriesid'=inputlist,
'startyear'=1994,
'endyear'=2014,
'registrationKey'='a8338f75033c4cf78613acb6ca3fc026')
response <- blsAPI(query,2)
json <- fromJSON(response)
for(j in 1:length(inputlist)){
#Parsing JSON String
temp <- json$Results[[1]][[j]]
tempoutput <- data.frame(seriesID=sapply(temp$seriesID,"["),
year=sapply(temp$data,"[[", "year"),
period=sapply(temp$data,"[[", "period"),
periodName=sapply(temp$data,"[[","periodName"),
value=as.numeric(sapply(temp$data,"[[","value")),
stringsAsFactors=FALSE,row.names=NULL)
output <- rbind(tempoutput,output)
}
View(output)
rm(list=ls())
#Pull the data from the BLS
setwd("C:/Users/hom42612/Desktop/Coursera/Kennecter")
library(blsAPI)
library(rjson)
input <- read.csv("./BLSData.csv", colClasses = "character")
inputlist <- as.list(input[1:nrow(input),])
#Create blank data frame that will have your final results. Change table names or column names as needed.
output <- data.frame("ID" = character(0),
"Year" = character(0),
"Period"= character(0),
"PeriodNAme" = character(0),
"Mean_Wage" = numeric(0))
#serieslist = as.list(c('LAUCN040010000000005','LAUCN040010000000006'))
query <- list('seriesid'=inputlist,
'startyear'=1994,
'endyear'=2014,
'registrationKey'='a8338f75033c4cf78613acb6ca3fc026')
response <- blsAPI(query,2)
json <- fromJSON(response)
for(j in 1:length(inputlist)){
#Parsing JSON String
temp <- json$Results[[1]][[j]]
tempoutput <- data.frame(seriesID=sapply(temp$seriesID,"["),
year=sapply(temp$data,"[[", "year"),
period=sapply(temp$data,"[[", "period"),
periodName=sapply(temp$data,"[[","periodName"),
value=as.numeric(sapply(temp$data,"[[","value")),
stringsAsFactors=FALSE,row.names=NULL)
output <- rbind(tempoutput,output)
}
View(output)
install.packages("acs")
library(acs)
?geo.set
my.states=geo.make(state="*")
my.states
?geo.make
MAmsas <- geo.make(state="MA", msa="*")
api.key.install(key="9a3374a10322c7799e3baa445c56da813a822b4c")
acsdata <- acs.fetch(endyear=2013, span=5, MAmsas, table.number=B15003)
acsdata <- acs.fetch(endyear=2013, span=5, MAmsas, table.name = "EDUCATIONAL", table.number="B15003")
acsdata <- acs.fetch(endyear=2011, span=5, MAmsas, table.number="B15003")
acsdata <- acs.fetch(endyear=2011, span=5, MAmsas, table.number="B01003")
acsdata <- as.data.frame(acs.fetch(endyear=2011, span=5, MAmsas, table.number="B01003"))
acsdata <- acs.fetch(endyear=2011, span=5, MAmsas, table.number="B01003")
casdata
acsdata
acsdata <- acs.fetch(endyear=2011, span=5, MAmsas, table.number="B15003")
acsdata <- acs.fetch(endyear=2011, span=5, MAmsas, table.number="B15002")
acsdata <- acs.fetch(endyear=2011, span=5, MAmsas, table.number="B23006")
acsdata
acs.lookup(table.number="B01001")
acs.lookup(table.number="B15003")
acs.lookup(table.number="B23006")
my.data=data.frame(estimate(acsdata),
1.645*standard.error(acsdata))
colnames(my.data)=c("Estimate", "90% MOE")
my.data
View(my.data)
class(my.data)
my.data
View(my.data)
write.csv(estimate(acsdata), file="./acsdata.csv")
acsframe <- data.frame(esimate(acsdata))
acsframe <- as.data.frame(esimate(acsdata))
acsframe <- as.data.frame(estimate(acsdata))
View(acsframe)
View(acsframe)
msas <- geo.make(state=c("MA","NY"), msa="*")
acsdata <- acs.fetch(endyear=2011, span=5, msas, table.number="B23006")
acsframe <- as.data.frame(estimate(acsdata))
View(acsframe)
rm(list=ls())
#Pull the data from the BLS
setwd("C:/Users/hom42612/Desktop/Coursera/Kennecter")
library(blsAPI)
library(rjson)
#Local Area Unemployment Statistics
#http://download.bls.gov/pub/time.series/la/la.area
#http://www.bls.gov/help/hlpforma.htm#OE
input <- read.csv("./BLSData.csv", colClasses = "character")
inputlist <- as.list(input[1:nrow(input),])
#Create blank data frame that will have your final results. Change table names or column names as needed.
output <- data.frame("ID" = character(0),
"Year" = character(0),
"Period"= character(0),
"PeriodNAme" = character(0),
"Mean_Wage" = numeric(0))
#serieslist = as.list(c('LAUCN040010000000005','LAUCN040010000000006'))
query <- list('seriesid'=inputlist,
'startyear'=1994,
'endyear'=2014,
'registrationKey'='a8338f75033c4cf78613acb6ca3fc026')
response <- blsAPI(query,2)
json <- fromJSON(response)
for(j in 1:length(inputlist)){
#Parsing JSON String
temp <- json$Results[[1]][[j]]
tempoutput <- data.frame(seriesID=sapply(temp$seriesID,"["),
year=sapply(temp$data,"[[", "year"),
period=sapply(temp$data,"[[", "period"),
periodName=sapply(temp$data,"[[","periodName"),
value=as.numeric(sapply(temp$data,"[[","value")),
stringsAsFactors=FALSE,row.names=NULL)
output <- rbind(tempoutput,output)
}
#Pulling data from America
library(acs)
#Load the API Key
api.key.install(key="9a3374a10322c7799e3baa445c56da813a822b4c")
#Create GEO Object
msas <- geo.make(state=c("MA","NY"), msa="*")
acsdata <- acs.fetch(endyear=2011, span=5, msas, table.number="B23006")
acsframe <- as.data.frame(estimate(acsdata))
#Select the Variables We Need
View(acsframe)
View(output)
View(acsframe)
rm(list=ls())
?getURLContent
test <- getURLcontent(http://api.census.gov/data/2013/acs5/profile?get=DP02_0001PE&for=state:*&key="9a3374a10322c7799e3baa445c56da813a822b4c")
test <- getURLcontent("http://api.census.gov/data/2013/acs5/profile?get=DP02_0001PE&for=state:*&key=9a3374a10322c7799e3baa445c56da813a822b4c")
library(rCurl)
library(RCurl)
test <- getURLcontent("http://api.census.gov/data/2013/acs5/profile?get=DP02_0001PE&for=state:*&key=9a3374a10322c7799e3baa445c56da813a822b4c")
test <- getURL("http://api.census.gov/data/2013/acs5/profile?get=DP02_0001PE&for=state:*&key=9a3374a10322c7799e3baa445c56da813a822b4c")
test
json <- myjson(test)
json <- fromJSON(test)
json
test <- getURL("http://api.census.gov/data/2013/acs5/profile?get=DP02_0058E&for=state:*&key=9a3374a10322c7799e3baa445c56da813a822b4c")
myjson <- fromJSON(test)
myjson$Results
myjson
rm(list=ls())
#Pull the data from the BLS
setwd("C:/Users/hom42612/Desktop/Coursera/Kennecter")
library(blsAPI)
library(rjson)
#Local Area Unemployment Statistics
#http://download.bls.gov/pub/time.series/la/la.area
#http://www.bls.gov/help/hlpforma.htm#OE
input <- read.csv("./BLSData.csv", colClasses = "character")
inputlist <- as.list(input[1:nrow(input),])
#Create blank data frame that will have your final results. Change table names or column names as needed.
output <- data.frame("ID" = character(0),
"Year" = character(0),
"Period"= character(0),
"PeriodNAme" = character(0),
"Mean_Wage" = numeric(0))
#serieslist = as.list(c('LAUCN040010000000005','LAUCN040010000000006'))
query <- list('seriesid'=inputlist,
'startyear'=1994,
'endyear'=2014,
'registrationKey'='a8338f75033c4cf78613acb6ca3fc026')
response <- blsAPI(query,2)
json <- fromJSON(response)
for(j in 1:length(inputlist)){
#Parsing JSON String
temp <- json$Results[[1]][[j]]
tempoutput <- data.frame(seriesID=sapply(temp$seriesID,"["),
year=sapply(temp$data,"[[", "year"),
period=sapply(temp$data,"[[", "period"),
periodName=sapply(temp$data,"[[","periodName"),
value=as.numeric(sapply(temp$data,"[[","value")),
stringsAsFactors=FALSE,row.names=NULL)
output <- rbind(tempoutput,output)
}
#Pulling data from America
#http://cran.r-project.org/web/packages/acs/acs.pdf
library(acs)
#Load the API Key
api.key.install(key="9a3374a10322c7799e3baa445c56da813a822b4c")
#Create GEO Object
msas <- geo.make(state=c("MA","NY"), msa="*")
acsdata <- acs.fetch(endyear=2011, span=5, msas, table.number="B23006")
acsframe <- as.data.frame(estimate(acsdata))
#Select the Variables We Need
View(acsframe)
View(acsframe)
write.csv(acsframe, file="./acsdata.csv")
msas <- geo.make(state=c("MA","NY"), msa="*")
acsdata <- acs.fetch(endyear=2014, span=1, msas, table.number="B23006")
acsframe <- as.data.frame(estimate(acsdata))
#Pulling data from America
#http://cran.r-project.org/web/packages/acs/acs.pdf
library(acs)
#Load the API Key
api.key.install(key="9a3374a10322c7799e3baa445c56da813a822b4c")
#Create GEO Object
msas <- geo.make(state=c("MA","NY"), msa="*")
acsdata <- acs.fetch(endyear=2013, span=1, msas, table.number="B23006")
acsframe <- as.data.frame(estimate(acsdata))
library(dplyr)
?mutate
?mutate
acsframe <- mutate(acsframe, BSunemp = B23006_028/(B23006_003+B23006_010+B23006_017+B23006_024))
View(acsframe)
api.key.install(key="9a3374a10322c7799e3baa445c56da813a822b4c")
#Create GEO Object
msas <- geo.make(state=c("MA","NY"), msa="*")
acsdata <- acs.fetch(endyear=2011, span=5, msas, table.number="B23006")
acsframe <- as.data.frame(estimate(acsdata))
View(acsframe)
#B23006_003+B23006_010+B23006_017+B23006_024: Total Labor Force
#B23006_021: Unemployed with Some College or Associate's Degree
#B23006_028: Unemployment with Bachelor's Degree or Higher
acsframe <- mutate(acsframe, BSunemp = B23006_028/(B23006_003+B23006_010+B23006_017+B23006_024))
View(acsframe)
#Load the API Key
api.key.install(key="9a3374a10322c7799e3baa445c56da813a822b4c")
#Create GEO Object
msas <- geo.make(state=c("MA","NY"), msa="*")
acsdata <- acs.fetch(endyear=2011, span=5, msas, table.number="B23006")
acsframe <- as.data.frame(estimate(acsdata))
#Select the Variables We Need
#Mnemonics codes:
#B23006_001: Total Population
#B23006_003+B23006_010+B23006_017+B23006_024: Total Labor Force
#B23006_021: Unemployed with Some College or Associate's Degree
#B23006_028: Unemployment with Bachelor's Degree or Higher
acsframe <- mutate(acsframe, BSunemp = B23006_028/(B23006_003+B23006_010+B23006_017+B23006_024), row.names=TRUE)
View(acsframe)
View(acsframe)
api.key.install(key="9a3374a10322c7799e3baa445c56da813a822b4c")
#Create GEO Object
msas <- geo.make(state=c("MA","NY"), msa="*")
acsdata <- acs.fetch(endyear=2011, span=5, msas, table.number="B23006")
acsframe <- as.data.frame(estimate(acsdata))
acsframe <- cbind(Row.Names = rownames(acsframe), acsframe)
View(acsframe)
acsframe <- mutate(acsframe, BSunemp = B23006_028/(B23006_003+B23006_010+B23006_017+B23006_024))
View(acsframe)
View(output)
acsframe <- mutate(acsframe, BSunemp = B23006_028/(B23006_007+B23006_014+B23006_021+ B23006_028))
View(acsframe)
?sort
sort(output$year)
?arrange
output <- output[order(output$year, descending=TRUE),]
class(output$year)
output$year <- as.numeric(output$year)
class(output$year)
output <- output[order(output$year, descending=TRUE),]
view(output)
veiw(output)
View(output)
class(output$year)
output <- output[order(output$year),]
View(output)
output <- output[order(output$year,decreasing = TRUE),]
View(output)
View(output)
output <- output[year==2013,]
output <- output[output$year==2013,]
View(output)
output <- output[output$seriesID == "*04",]
for(j in 1:length(inputlist)){
#Parsing JSON String
temp <- json$Results[[1]][[j]]
tempoutput <- data.frame(seriesID=sapply(temp$seriesID,"["),
year=sapply(temp$data,"[[", "year"),
period=sapply(temp$data,"[[", "period"),
periodName=sapply(temp$data,"[[","periodName"),
value=as.numeric(sapply(temp$data,"[[","value")),
stringsAsFactors=FALSE,row.names=NULL)
output <- rbind(tempoutput,output)
}
output$year <- as.numeric(output$year)
output <- output[order(output$year,decreasing=TRUE),]
View(acsframe)
BSRU_BOS <- acsframe[acsframe$Row.Names=="Boston-Cambridge-Quincy, MA-NH Metro Area (part); Massachusetts","BSunemp"]
BSRU_NYC <- acsframe[acsframe$Row.Names == "New York-Northern New Jersey-Long Island, NY-NJ-PA Metro Area (part); New York", "BSunemp"]
output <- output[output$year == 2013,]
View(output)
BSRU_BOS_FR <- output[seriesID == "LAUMT257165000000004",]
BSRU_BOS_FR <- output[output$seriesID == "LAUMT257165000000004",]
View(BSRU_BOS_FR)
BSRU_BOS_FR <- mutate(BSRU_BOS_FR, BSRU_BOS_N = value*BSRU_BOS)
View(BSRU_BOS_FR)
rm(list=ls())
table <- read.csv("CBSACodes.csv")
View(table)
rm(table)
table <- read.csv("CBSACodes.csv")
View(table)
class(table$CBSA.Code)
class(table$CBSA.Title)
as.numeric(table$CBSA.Code)
class(table$CBSA.Code)
?read.csv
rm(table)
table <- read.table("CBSACodes.csv", nrows=930)
table <- read.table("CBSACodes.csv")
table <- read.table("CBSACodes.csv", sep=",", nrows=930)
View(table)
table <- read.table("CBSACodes.csv", sep=",", nrows=930, header=TRUE)
View(table)
table <- read.table("CBSACodes.csv", sep=",", nrows=929, header=TRUE)
View(table)
class(table)
class(table$CBSA.Code)
class(table$CBSA.Title)
setwd ".\."
setwd "./."
source('C:/Users/hom42612/Desktop/Coursera/Kennecter/BLS and Census Data.R')
setwd('C:/Users/hom42612/Desktop/Coursera/')
source('C:/Users/hom42612/Desktop/Coursera/Kennecter/BLS and Census Data.R', chdir=TRUE)
source('C:/Users/hom42612/Desktop/Coursera/Kennecter/BLS and Census Data.R')
source('C:/Users/hom42612/Desktop/Coursera/Kennecter/BLS and Census Data.R')
source('C:/Users/hom42612/Desktop/Coursera/Kennecter/BLS and Census Data.R')
setwd('C:/Users/hom42612/Desktop/Coursera/')
source('C:/Users/hom42612/Desktop/Coursera/Kennecter/BLS and Census Data.R')
source('C:/Users/hom42612/Desktop/Coursera/Kennecter/BLS and Census Data.R', chdir=TRUE)
setwd("C:/Users/hom42612/Desktop/Coursera/Kennecter")
install.packages("noncesus")
install.packages("noncensus")
library(noncensus)
